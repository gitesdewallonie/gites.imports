Gites Imports
=============

    >>> import os
    >>> import gites.imports.tests
    >>> gitesImportTest = os.path.abspath(os.path.join(gites.imports.tests.__file__, '../'))
    >>> mogrifier = """
    ... [transmogrifier]
    ... pipeline =
    ...    foldersource
    ...    split-list
    ...    image-loader
    ...    constructor
    ...    atschemaupdate
    ...    canonical
    ...    translation
    ...    workflow
    ...    pprint
    ... [foldersource]
    ... blueprint = collective.transmogrifier.sections.csvsource
    ... filename = %s
    ... [split-list]
    ... blueprint = collective.transmogrifier.sections.inserter
    ... key = string:subject
    ... value = python:item.get('hebs', '').split('|')
    ... [image-loader]
    ... blueprint = collective.blueprint.downloader
    ... keys = image
    ... ignored_errors = 0
    ... [constructor]
    ... blueprint = collective.transmogrifier.sections.constructor
    ... type-key = type
    ... path-key = path
    ... [atschemaupdate]
    ... blueprint = plone.app.transmogrifier.atschemaupdate
    ... path-key = path
    ... [canonical]
    ... blueprint = collective.transmogrifier.sections.inserter
    ... key = string:canonical
    ... value = python:item.get('can', '') == 'True'
    ... [translation]
    ... blueprint = collective.blueprint.translationlinker
    ... path-key = path
    ... canonical-key = canonical
    ... translation-key = translation
    ... [workflow]
    ... blueprint = plone.app.transmogrifier.workflowupdater
    ... path-key = path
    ... transitions-key = transition
    ... [pprint]
    ... blueprint = collective.transmogrifier.sections.tests.pprinter
    ... """ % os.path.join(gitesImportTest, 'folder.csv')

    >>> from gites.imports.tests.test_import import registerConfig
    >>> from Products.CMFCore.utils import getToolByName
    >>> portal = getToolByName(self.portal, 'portal_url').getPortalObject()
    >>> registerConfig(u'collective.transmogrifier.tests.exampleconfig',
    ...                mogrifier)

    >>> from collective.transmogrifier.transmogrifier import Transmogrifier
    >>> transmogrifier = Transmogrifier(portal)
    >>> self.loginAsPortalOwner()
    >>> portal.invokeFactory('Folder', 'folder1')
    'folder1'
    >>> transmogrifier(u'collective.transmogrifier.tests.exampleconfig')
    {'can': 'True',
     'canonical': True,
     'hebs': '22|23',
     'id': 'bonjour',
     'language': 'fr',
     'path': '/folder1/bonjour',
     'subject': ['22', '23'],
     'title': 'Bonjour',
     'transition': 'publish',
     'translation': '',
     'type': 'Document'}
    {'can': 'False',
     'canonical': False,
     'hebs': '',
     'id': 'hello',
     'language': 'en',
     'path': '/folder1/hello',
     'subject': [''],
     'title': 'Hello',
     'transition': '',
     'translation': '/folder1/bonjour',
     'type': 'Document'}
    {'can': 'True',
     'canonical': True,
     'hebs': '25',
     'id': 'folder2',
     'language': 'en',
     'path': '/folder1/folder2',
     'subject': ['25'],
     'title': 'Folder 2',
     'transition': 'publish',
     'translation': '',
     'type': 'Folder'}
    {'can': 'True',
     'canonical': True,
     'hebs': '25',
     'id': 'im1',
     'image': <urllibcache.CachedResponse instance at ...>,
     'language': 'en',
     'path': '/folder1/folder2/im1',
     'subject': ['25'],
     'title': 'Image 1',
     'transition': '',
     'translation': '',
     'type': 'Image'}

    >>> doc = portal.folder1.bonjour
    >>> doc
    <ATDocument at /plone/folder1/bonjour>
    >>> doc.Title()
    'Bonjour'
    >>> docEnglish = doc.getTranslation('en')
    >>> docEnglish
    <ATDocument at /plone/folder1/hello>
    >>> doc == docEnglish.getTranslation('fr')
    True
    >>> doc.Language()
    'fr'
    >>> docEnglish.Language()
    'en'
    >>> doc.Subject()
    ('22', '23')
    >>> portal.portal_workflow.getInfoFor(doc, 'review_state')
    'published'
    >>> portal.portal_workflow.getInfoFor(docEnglish, 'review_state')
    'visible'

    >>> im = portal.folder1.folder2.im1
    >>> im.get_size() > 0
    True
    >>> im.getWidth() > 0
    True

